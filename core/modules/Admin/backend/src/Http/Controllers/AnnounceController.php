<?php

namespace Admin\Http\Controllers;

use Validator;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\Request;
use Illuminate\Support\Str;
use Admin\Http\Models\AnnounceModel;

class AnnounceController extends \Zoe\Http\ControllerBackend
{
    public function getCrumb()
    {
        $this->breadcrumb(z_language("Announce"), ('backend:announce:list'));
        return $this;
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->data['roles'] = DB::table('role')->get()->all();
        $this->data['admins'] = DB::table('admin')->get()->all();
        $this->data['language'] = config('zoe.language');
        $this->data['configs'] = config_get("config", "system");
        $this->data['current_language'] =
            isset($this->data['configs']['core']['site_language']) ?
                $this->data['configs']['core']['site_language'] :
                config('zoe.default_lang');
    }

    public function list(Request $request)
    {
        $this->getcrumb();
        $search = $request->query('search', "");
        $status = $request->query('status', "");
        $date = $request->query('date', "");

        $config = config_get('option', "core:announce");
        $item = isset($config['pagination']['item']) ? $config['pagination']['item'] : 20;

        $models = DB::table('announce');
        $select = [
            'announce.id',
            'announce.date_start',
            'announce.created_at',
            'announce.date_end',
            'announce.status',
            'announce.type',
            'rt.title',
            'rt.message'
        ];
        $models->select($select);
        if (!empty($search)) {
            $models->where('title', 'like', '%' . $search);
        }
        if (!empty($status) || $status != "") {
            $models->where('status', $status);
        }

        $lang = $this->data['current_language'];
        $models->join('announce_translation as rt', 'rt._id', '=', 'announce.id');
        $models->where('rt.lang_code', $lang);

        $models->orderBy('id', 'desc');
        return $this->render('announce.lists', [
            'models' => $models->paginate($item),
            'callback' => [
                "get_name" => function ($model) {
                    if ($model->type == 1) {
                        return "Tất cả";
                    }
                    if ($model->type == 2) {
                        $rs = DB::table('admin')->where('id', $model->action_id)->get()->all();
                        if (isset($rs[0])) {
                            return $rs[0]->username;
                        }
                    }
                    if ($model->type == 3) {
                        $rs = DB::table('role')->where('id', $model->action_id)->get()->all();
                        if (isset($rs[0])) {
                            return $rs[0]->name;
                        }
                    }
                    return "Không xác định";
                }
            ]
        ]);
    }

    public function create(Request $request)
    {
        $this->getcrumb()->breadcrumb(z_language('Tạo thông báo'), false);
        return $this->render('announce.create', []);
    }

    public function edit($id)
    {
        $this->getcrumb()->breadcrumb(z_language('Sửa thông báo'), false);
        $model = AnnounceModel::find($id);
        if (isset($this->data['configs']['core']['language']['multiple'])) {
            $trans = $model->table_translation_model()->where(['_id' => $id])->get()->all();
            foreach ($trans as $tran) {
                $model->offsetSet("title_" . $tran->lang_code, $tran->title);
                $model->offsetSet("message_" . $tran->lang_code, $tran->message);
            }
        }
        return $this->render('announce.edit', ["model" => $model]);
    }

    public function delete(Request $request)
    {
        $id = $request->id;
        $ref = $request->ref;
        $model = AnnounceModel::find($id);
        if ($model) {
            $model->delete();
        }
        if ($ref) {
            return redirect($ref);
        } else {
            return redirect(route('backend:announce:list', []));
        }
    }

    public function status()
    {

    }

    public function store(Request $request)
    {
        $data = $request->all();

        $filter = [
            'title' => 'required',
            'message' => 'required',
        ];
        if (isset($this->data['configs']['core']['language']['multiple'])) {
            $newFilter = [];
            foreach ($this->data['language'] as $lang => $_language) {
                if (
                    isset($this->data['configs']['core']['language']['lists']) &&
                    (is_string($this->data['configs']['core']['language']['lists']) &&
                        $this->data['configs']['core']['language']['lists'] == $_language['lang'] ||
                        is_array($this->data['configs']['core']['language']['lists']) && in_array($_language['lang'], $this->data['configs']['core']['language']['lists']))) {
                    foreach ($filter as $col => $value) {
                        $newFilter[$col . '_' . $lang] = $value;
                    }
                }

            }
            $filter = $newFilter;
        }
        $rules = [];
        $filter['date_start'] = 'required';
        $filter['date_end'] = 'required';

        $validator = Validator::make($data, $filter, [
            'title.required' => z_language('Tên không được phép bỏ trống.'),
        ]);

        if ($validator->fails()) {
            return back()
                ->withErrors($validator)
                ->withInput();
        }
        $type = 'create';
        if (isset($data['id']) && !empty($data['id'])) {
            $model = AnnounceModel::find($data['id']);
            $type = 'edit';
        } else {
            $model = new AnnounceModel();
        }
        try {
            $model->title = empty($data['title']) ? 'empty' : $data['title'];
            $model->action_id = $data['action_id'];
            $model->type = $data['type'];
            $model->message = empty($data['message']) ? 'empty' : $data['message'];
            $model->date_start = date('Y-m-d', strtotime($data['date_start']));
            $model->date_end = date('Y-m-d', strtotime($data['date_end']));
            $model->status = $data['status'];
            DB::beginTransaction();
            try {
                $model->save();
                foreach ($this->data['language'] as $lang => $_language) {
                    if (isset($data['title_' . $lang])) {
                        $model->table_translation_model()->updateOrInsert(
                            [
                                '_id' => $model->id,
                                'lang_code' => $lang
                            ],
                            [
                                'title' => $data['title_' . $lang],
                                'message' => $data['message_' . $lang]
                            ]
                        );
                    }
                }
                $this->log('announce:edit', $type, ['id' => $model->id]);
                $request->session()->flash('success', z_language('Cập nhật thông tin thành công'));
                DB::commit();
                return redirect(route('backend:announce:edit', ['id' => $model->id]));
            } catch (\Exception $ex) {
                $validator->getMessageBag()->add('id', $ex->getMessage());
                DB::rollBack();
            }
        } catch (\Exception $ex) {
            $validator->getMessageBag()->add('id', $ex->getMessage());
        }
        return back()
            ->withErrors($validator)
            ->withInput();
    }
}