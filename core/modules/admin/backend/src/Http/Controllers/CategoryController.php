<?php

namespace Admin\Http\Controllers;

use Illuminate\Http\Request;
use Validator;
use Admin\Http\Models\Categories;
use Illuminate\Support\Str;

class CategoryController extends \Zoe\Http\ControllerBackend
{
    public function getCrumb()
    {
        return $this;
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function ajax(Request $request)
    {
        $post = $request->all();
        if (isset($post['act'])) {
            if ($post['act'] == "info") {
                $data = $post['data'];
                $validator = Validator::make($data, [
                    'name' => 'required',
                    'description' => 'required',
                ]);
                $rules = [];
                if ($validator->passes()) {
                    $oke = true;
                    if (isset($data["data"])) {
                        $type = $data['type'];
                        if (isset(app()->getConfig()['modules']['admin.category'][$type]['rules'])) {
                            $rules = (app()->getConfig()['modules']['admin.category'][$type]['rules']);
                            $validator = Validator::make($data['data'], $rules);
                            $oke = $validator->passes();
                        }
                    }
                    if ($oke) {
                        $create = false;
                        if (isset($data) && isset($data['id']) && $data['id'] != 0) {
                            $category = Categories::find($data['id']);
                        } else {

                            $category = new Categories();
                            $create = true;
                        }
                        $slug = Str::slug($data['name'], '-');
                        $category->name = $data['name'];
                        $category->slug = $slug;
                        $category->parent_id = 0;
                        $category->description = $data['description'];
                        $category->status = $data['status'];
                        $category->type = $data['type'];
                        $category->icon = "";
                        $category->featured = $data['featured'];
                        $category->order = 0;
                        $category->is_default = 0;
                        $category->data = isset($data["data"]) && is_array($data["data"]) ? serialize($data["data"]) : serialize([]);
                        $category->save();
                        return response()->json(['success' => $data]);
                    } else {
                        return response()->json(['error' => $validator->errors(), 'data_rules' => $rules]);
                    }
                } else {
                    return response()->json(['error' => $validator->errors(), 'data_rules' => $rules]);
                }

            } else if ($post['act'] == "position") {

                $data = $post['data'];
                \Illuminate\Support\Facades\DB::beginTransaction();
                try {
                    if (isset($data['id']) && $data['id'] != 0) {
                        $category = Categories::find($data['id']);
                        $category->delete();
                    }
                    config_set("category", $data['type'], ['data' => $data['pos']]);
                    \Illuminate\Support\Facades\DB::commit();
                    return response()->json(['error' => 0, 'data' => $data]);
                } catch (\Exception $ex) {
                    \Illuminate\Support\Facades\DB::rollBack();
                    return response()->json(['error' => 1]);
                }

            } else if ($post['act'] == "edit") {
                $data = $post['data'];
                $category = Categories::find($data['id']);
                return response()->json(['data' => $category]);
            } else if ($post['act'] == "nestable") {
                $data = $post['data'];
                $type = $data['type'];
                $this->data['category'] = get_category_type($type);
                echo $this->nestable(config_get("category", $type), 0, true);
            }
        }
    }

    private $html = "";

    private function nestable($nestable, $parent_id = 0, $root = false)
    {
        $html = '<ol class="dd-list">';
        foreach ($nestable as $key => $item) {
            if (isset($this->data['category'][$item['id']])) {
                $html .= '<li class="dd-item dd3-item" data-id="' . $item['id'] . '" parent_id="' . $parent_id . '">';
                $html .= '<div class="dd-handle dd3-handle"></div>
		        <div class="dd3-content">' . $this->data['category'][$item['id']]->name . '</div>';
                $html .= "<div class='dd3-tool'><button class='btn btn-primary btn-xs edit'>" . "<i class='fa fa-edit'></i>" . "</button><button class='btn  btn-default btn-xs delete'>" . "<i class='fa fa-remove'></i>" . "</button></div>";
                unset($this->data['category'][$item['id']]);
                if (isset($item["children"])) {
                    $html .= $this->nestable($item["children"], $item['id']);
                }
                $html .= '</li>';
            }
        }
        if ($root) {
            foreach ($this->data['category'] as $k => $item) {
                $html .= '<li class="dd-item dd3-item" data-id="' . $item->id . '" parent_id="0">';
                $html .= '<div class="dd-handle dd3-handle"></div>
		        <div class="dd3-content">' . $item->name . '</div>';
                $html .= "<div class='dd3-tool'><button class='btn btn-primary btn-xs edit'>" . "<i class='fa fa-edit'></i>" . "</button><button class='btn  btn-default btn-xs delete'>" . "<i class='fa fa-remove'></i>" . "</button></div>";
                $html .= '</li>';
            }
        }
        $html .= '</ol>';
        return $html;
    }

    public function list(Request $request)
    {

        $type = isset($request->route()->defaults['type']) ? $request->route()->defaults['type'] : 'category';
        $views = "";
        if (isset(app()->getConfig()['modules']['admin.category'][$type]['views'])) {
            $views = (app()->getConfig()['modules']['admin.category'][$type]['views']);
        }
        $this->data['category'] = get_category_type($type);
        $this->data['nestable'] = $this->nestable(config_get("category", $type), 0, true);
        $this->data['type'] = $type;
        $this->data['views'] = $views;
        return $this->render('category.list');
    }
}